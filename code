SQL QUERIES FOR 3rd HW:

create Table customers (
  customer_id int4 primary key, 
  first_name varchar(50),
  last_name varchar(50),
  gender varchar(30),
  dob varchar(50),
  job_title varchar(50),
  job_industry_category varchar(50),
  wealth_segment varchar(50),
  deceased_indicator varchar(50),
  owns_car varchar(30),
  address varchar(50),
  postcode varchar(30),
  state varchar(30), 
  country varchar(30),
  property_valuation int4
);

create Table transactions (
  transaction_id int4 primary key,
  product_id int4,
  customer_id int4,
  transaction_date varchar(30),
  online_order varchar(30),
  order_status varchar(30),
  brand varchar(30),
  product_line varchar(30),
  product_class varchar(30),
  product_size varchar(30),
  list_price float4,
  standard_cost float4,
  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);


/ задание 1
SELECT job_industry_category, COUNT(*) as client_count
FROM customers
GROUP BY job_industry_category
ORDER BY client_count DESC;

/ задание 2
SELECT EXTRACT(MONTH FROM TO_DATE(transaction_date, 'DD.MM.YYYY')) AS month,
       job_industry_category,
       SUM(list_price) AS total_transaction_sum
FROM transactions t
JOIN customers c ON t.customer_id = c.customer_id
GROUP BY month, job_industry_category
ORDER BY month, job_industry_category;

/ задание 3
SELECT t.brand, COUNT(*) AS online_order_count
FROM transactions t
JOIN customers c ON t.customer_id = c.customer_id
WHERE c.job_industry_category = 'IT'
  AND t.order_status = 'Approved'
  AND t.online_order = 'True'
GROUP BY t.brand
ORDER BY online_order_count DESC;

/ задание 4
ИСПОЛЬЗУЯ ТОЛЬКО GROUP BY:
SELECT
  customer_id,
  COUNT(*) AS transaction_count,
  SUM(list_price) AS total_amount,
  MAX(list_price) AS max_transaction,
  MIN(list_price) AS min_transaction
FROM transactions
GROUP BY customer_id
ORDER BY total_amount DESC, transaction_count DESC;

ИСПОЛЬЗУЯ ТОЛЬКО ОКОННЫЕ ФУНКЦИИ:
SELECT DISTINCT
  customer_id,
  COUNT(*) OVER (PARTITION BY customer_id) AS transaction_count,
  SUM(list_price) OVER (PARTITION BY customer_id) AS total_amount,
  MAX(list_price) OVER (PARTITION BY customer_id) AS max_transaction,
  MIN(list_price) OVER (PARTITION BY customer_id) AS min_transaction
FROM transactions
ORDER BY total_amount DESC, transaction_count DESC;

/ задание 5
ДЛЯ МИНИМАЛЬНОЙ СУММЫ ТРАНЗАКЦИЙ:
SELECT c.first_name, c.last_name, SUM(t.list_price) AS total_amount
FROM customers c
JOIN transactions t ON c.customer_id = t.customer_id
WHERE t.list_price IS NOT NULL
GROUP BY c.customer_id, c.first_name, c.last_name
HAVING SUM(t.list_price) = (
  SELECT MIN(total_sum)
  FROM (
    SELECT customer_id, SUM(list_price) AS total_sum
    FROM transactions
    WHERE list_price IS NOT NULL
    GROUP BY customer_id
  ) AS min_sum
);

ДЛЯ МАКСИМАЛЬНОЙ СУММЫ ТРАНЗАКЦИЙ:
SELECT c.first_name, c.last_name, SUM(t.list_price) AS total_amount
FROM customers c
JOIN transactions t ON c.customer_id = t.customer_id
WHERE t.list_price IS NOT NULL
GROUP BY c.customer_id, c.first_name, c.last_name
HAVING SUM(t.list_price) = (
  SELECT MAX(total_sum)
  FROM (
    SELECT customer_id, SUM(list_price) AS total_sum
    FROM transactions
    WHERE list_price IS NOT NULL
    GROUP BY customer_id
  ) AS max_sum
);

/ задание 6
WITH RankedTransactions AS (
  SELECT
    customer_id,
    transaction_id,
    ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY transaction_date) AS row_num
  FROM transactions
)
SELECT
  r.customer_id,
  r.transaction_id,
  t.list_price,
  t.transaction_date
FROM RankedTransactions r
JOIN transactions t ON r.transaction_id = t.transaction_id
WHERE r.row_num = 1;

/ задание 7
WITH TransactionIntervals AS (
  SELECT
    c.customer_id,
    c.first_name,
    c.last_name,
    c.job_title,
    LAG(TO_DATE(t.transaction_date, 'DD.MM.YYYY')) OVER (PARTITION BY c.customer_id ORDER BY TO_DATE(t.transaction_date, 'DD.MM.YYYY')) AS prev_transaction_date,
    TO_DATE(t.transaction_date, 'DD.MM.YYYY') AS transaction_date,
    COALESCE(TO_DATE(t.transaction_date, 'DD.MM.YYYY') - LAG(TO_DATE(t.transaction_date, 'DD.MM.YYYY')) OVER (PARTITION BY c.customer_id ORDER BY TO_DATE(t.transaction_date, 'DD.MM.YYYY')), 0) AS interval_days
  FROM customers c
  JOIN transactions t ON c.customer_id = t.customer_id
)
SELECT
  customer_id,
  first_name,
  last_name,
  job_title
FROM TransactionIntervals
WHERE interval_days = (SELECT MAX(interval_days) FROM TransactionIntervals);
